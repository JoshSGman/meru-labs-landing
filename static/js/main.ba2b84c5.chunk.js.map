{"version":3,"sources":["Assets/MeruLabsLogo.png","Assets/MeruTattooCareLogo.png","Assets/DoughDealerLogo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","goToMeru","window","open","react_default","a","createElement","className","href","src","logo","alt","onClick","this","meruTattooCareLogo","target","rel","doughDealerLogo","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+SC8DzBC,0NArDbC,SAAW,WACTC,OAAOC,KAAK,iCAAkC,mFAI9C,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,KACEC,UAAU,kBACVC,KAAK,4BAFP,YAIFJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YACdH,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACzCP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAb,aAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OACIM,QAAUC,KAAKZ,SACfQ,IAAMK,IACNP,UAAU,gBACVI,IAAI,SACRP,EAAAC,EAAAC,cAAA,KACIC,UAAU,WACVC,KAAK,iCACLO,OAAO,SACPC,IAAI,uBAJR,yBASFZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKG,IAAKQ,IAAiBV,UAAU,gBAAgBI,IAAI,SACzDP,EAAAC,EAAAC,cAAA,KACIC,UAAU,yBACVC,KAAK,cACLQ,IAAI,uBAHR,0BAtCIE,cCIEC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba2b84c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/MeruLabsLogo.69366185.png\";","module.exports = __webpack_public_path__ + \"static/media/MeruTattooCareLogo.7e4322b8.png\";","module.exports = __webpack_public_path__ + \"static/media/DoughDealerLogo.2b8ac48d.png\";","import React, { Component } from 'react';\nimport logo from './Assets/MeruLabsLogo.png';\nimport meruTattooCareLogo from './Assets/MeruTattooCareLogo.png';\nimport doughDealerLogo from './Assets/DoughDealerLogo.png';\nimport './App.css';\nimport './Fonts/fonts.css';\n\n\nclass App extends Component {\n  goToMeru = () => {\n    window.open('https://www.merutattoocare.com', '_blank');\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a\n            className=\"App-header-link\"\n            href=\"mailto:josh@merulabs.com\">contact</a>\n        </header>\n        <main className=\"App-main\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p className=\"App-work-main\">\n            Our Work:\n          </p>\n\n          <div className=\"App-links\">\n\n            <div className=\"App-link-container\">\n              <img\n                  onClick={ this.goToMeru }\n                  src={ meruTattooCareLogo }\n                  className=\"App-link-logo\"\n                  alt=\"logo\" />\n              <a\n                  className=\"App-link\"\n                  href=\"https://www.merutattoocare.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\">\n                Tattoo Care Products\n              </a>\n            </div>\n\n            <div className=\"App-link-container\">\n              <img src={doughDealerLogo} className=\"App-link-logo\" alt=\"logo\" />\n              <a\n                  className=\"App-link App-link-null\"\n                  href=\"#ComingSoon\"\n                  rel=\"noopener noreferrer\">\n                Coming Soon\n              </a>\n            </div>\n\n          </div>\n\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}